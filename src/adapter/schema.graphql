schema {
  query: RootSchemaQuery
}
directive @filter(
  """
  Name of the filter operation to perform.
  """
  op: String!
  """
  List of string operands for the operator.
  """
  value: [String!]
) on FIELD | INLINE_FRAGMENT
directive @tag(
  """
  Name to apply to the given property field.
  """
  name: String
) on FIELD
directive @output(
  """
  What to designate the output field generated from this property field.
  """
  name: String
) on FIELD
directive @optional on FIELD
directive @recurse(
  """
  Recurse up to this many times on this edge. A depth of 1 produces the current
  vertex and its immediate neighbors along the given edge.
  """
  depth: Int!
) on FIELD
directive @fold on FIELD
directive @transform(
  """
  Name of the transformation operation to perform.
  """
  op: String!
) on FIELD

"""
All the possible data types where querying can begin in this API.
"""
type RootSchemaQuery {
  Repository(owner: String!, name: String): [Repository!]!
}

type Organization implements Account {
  name: String!
}

type User implements Account {
  name: String!
}

interface Account {
  name: String!
}

type Reactions {
  plus_one: Int!
  minus_one: Int!
  laugh: Int!
  hooray: Int!
  confused: Int!
  heart: Int!
  rocket: Int!
  eyes: Int!

  total: Int!
}

type Comment {
  message: String!

  by: Account!
  reactions: Reactions!
}

type Label {
  name: String!
}

type Issue {
  description: String!
  state: String!

  opened_by: Account!
  reactions: Reactions!

  label: [Label!]!
  comment: [Comment!]!
}

type Repository {
  name: String!
  stars: Int!

  owner: Account!

  issue: [Issue!]!
}
